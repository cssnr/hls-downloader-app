name: "Build"

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  windows:
    name: "Windows"
    runs-on: windows-latest
    timeout-minutes: 5

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: "PyInstaller"
        run: |
          python -m pip install -r requirements.txt
          pyinstaller --noconfirm client.spec
          python manifest.py

      - name: "Download FFmpeg"
        uses: robinraju/release-downloader@v1.10
        with:
          repository: "BtbN/FFmpeg-Builds"
          fileName: "ffmpeg-master-latest-win64-gpl.zip"
          out-file-path: "dist"
          latest: true
          extract: true

      - name: "Move FFmpeg"
        run: |
          mv dist/ffmpeg-master-latest-win64-gpl/bin/ffmpeg.exe dist/ffmpeg.exe
          ls dist

      - name: "Write Version"
        run: |
          echo "${GITHUB_REF_NAME}" > src/version.txt

      - name: "Inno Setup"
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: client.iss
          options: "/DMyAppVersion=${{ github.ref_name }}"

      - name: "Debug"
        run: |
          ls -R out

      - name: "Upload to Actions"
        uses: actions/upload-artifact@v4
        with:
          name: install-win
          path: out

      - name: "Upload to Release"
        uses: svenstaro/upload-release-action@v2
        if: ${{ github.event_name == 'release' }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: out/*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

  linux:
    name: "Linux"
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: "Python Requirements"
        run: |
          python -m pip install -r requirements.txt

      - name: "Download FFmpeg"
        uses: robinraju/release-downloader@v1.10
        with:
          repository: "BtbN/FFmpeg-Builds"
          fileName: "ffmpeg-master-latest-linux64-gpl.tar.xz"
          out-file-path: "dist"
          latest: true

      - name: "Move FFmpeg"
        run: |
          tar -xf dist/ffmpeg-master-latest-linux64-gpl.tar.xz -C dist ffmpeg-master-latest-linux64-gpl/bin/ffmpeg
          mv dist/ffmpeg-master-latest-linux64-gpl/bin/ffmpeg dist/ffmpeg
          ls dist

      - name: "Write Version"
        run: |
          echo "${GITHUB_REF_NAME}" > src/version.txt

      - name: "Debian Package"
        run: |
          python manifest.py
          bash build-linux.sh

      - name: "Debug"
        run: |
          ls -R

      - name: "Upload to Actions"
        uses: actions/upload-artifact@v4
        with:
          name: install-linux
          path: out

      - name: "Upload to Release"
        uses: svenstaro/upload-release-action@v2
        if: ${{ github.event_name == 'release' }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: out/*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

  macos:
    name: "macOS"
    runs-on: macos-latest
    timeout-minutes: 5

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: "Setup Packages"
        run: |
          curl http://s.sudre.free.fr/Software/files/Packages.dmg -o Packages.dmg
          hdiutil attach Packages.dmg
          sudo installer -pkg "/Volumes/Packages 1.2.10/Install Packages.pkg" -target /
          hdiutil detach "/Volumes/Packages 1.2.10"

      - name: "Download FFmpeg"
        run: |
          mkdir -p dist
          curl "https://evermeet.cx/ffmpeg/ffmpeg-6.1.1.zip" -o "dist/ffmpeg.zip"
          unzip "dist/ffmpeg.zip" -d "dist"
          ls dist

      - name: "Write Version"
        run: |
          echo "${GITHUB_REF_NAME}" > src/version.txt

      - name: "PyInstaller"
        run: |
          python -m pip install -r requirements.txt
          pyinstaller --noconfirm client.spec
          python manifest.py
          bash build-mac.sh

      - name: "Debug"
        run: |
          ls -R

      - name: "Upload to Actions"
        uses: actions/upload-artifact@v4
        with:
          name: install-macos
          path: out

      - name: "Upload to Release"
        uses: svenstaro/upload-release-action@v2
        if: ${{ github.event_name == 'release' }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: out/*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

  virustotal:
    name: "VirusTotal Scan"
    runs-on: ubuntu-latest
    needs: [windows, linux, macos]
    timeout-minutes: 5
    if: ${{ github.event_name == 'release' }}

    steps:
      - name: "VirusTotal"
        uses: cssnr/virustotal-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          vt_api_key: ${{ secrets.VT_API_KEY }}
          update_release: true
